pipeline {
    agent any
    tools{
        gradle 'gradle'
    }
    environment{
        dockerImage = ''
        CHANGED_FOLDER = 'back'
    }

    stages {
        stage('Check Changes') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                    if (!changes.contains(env.CHANGED_FOLDER)) {
                        currentBuild.result = 'SUCCESS'
                        error("No changes in the back folder.")
                    }
                }
            }
        }
        stage('secret.yml download'){
            steps{
                withCredentials([file(credentialsId: 'application-secret', variable: 'configFile')]){
                    script{
                        sh "cp $configFile back/src/main/resources/application.yml"

                    }
                }
                // withCredentials([file(credentialsId: 'key-store', variable: 'keyFile')]){
                //     script{
                //         sh "cp $keyFile back/keystore.p12"
                //     }
                // }
            }
        }
        stage('Build'){
            steps{
                dir("./back"){
                    sh "chmod +x gradlew"
                    sh "gradle wrapper"
                    sh "./gradlew clean build"
                }
            }
        }
        stage("Build Image"){
            steps{
                dir("./back"){
                    script{
                        dockerImage = docker.build("run-time"+":$BUILD_NUMBER")
                      }
                }
            }
        }
//         stage('Push image') {
//             steps{
//                 script{
//                     docker.withRegistry('https://registry.hub.docker.com', 'dockerhub'){
//                         dockerImage.push("${env.BUILD_NUMBER}")
//                         dockerImage.push("latest")
//                     }
//                 }
//             }
//         }
         stage('stop prev container'){
            steps {
                script {
                    try {
                        sh 'docker stop run-time'
                        sh 'docker rm run-time'
                    } catch (e) {
                        echo 'no prev container'
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    // 이미지를 기반으로 컨테이너 실행
                    dockerImage.run("-p 8000:8000 --name run-time -d")
                }
            }
        }
        stage('Cleaning up'){
            steps{
                script {
                    try{
                        // 이전 빌드 번호 계산
                        def previousBuildNumber = BUILD_NUMBER.toInteger() - 1
                        // 이전 이미지 삭제
                        sh "docker rmi run-time:$previousBuildNumber"
                    }catch(e){
                        sh 'echo fail!!'
                    }

                }
            }
        }

    }
        post {
            success {
            	script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend (color: 'good',
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}",
                    text:":gg-ddabong: "
                    )
                }
            }
            failure {
            	script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend (color: 'danger',
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}",
                    text:":stupidface: "
                    )
                }
            }
        }
}
